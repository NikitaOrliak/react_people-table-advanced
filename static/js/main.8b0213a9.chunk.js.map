{"version":3,"sources":["components/Navbar/Navbar.tsx","App.tsx","components/NotFoundPage/NotFoundPage.tsx","components/HomePage/HomePage.tsx","components/Loader/Loader.tsx","api.ts","utils/searchHelper.ts","helpers/SearchLink.tsx","components/PeopleFilters.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable.tsx","helpers/GetPreparedPeople.tsx","components/PeoplePage/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["getLinkClass","_ref","isActive","classNames","Navbar","_jsx","className","role","children","_jsxs","NavLink","to","App","Outlet","NotFoundPage","HomePage","Loader","API_URL","wait","delay","Promise","resolve","setTimeout","_getPeople","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","then","fetch","response","json","stop","apply","arguments","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","_ref2","_slicedToArray","key","value","delete","Array","isArray","part","append","set","SearchLink","params","props","_objectWithoutProperties","_excluded","_useSearchParams","useSearchParams","searchParams","Link","_objectSpread","search","PeopleFilters","_useSearchParams2","setSearchParams","sex","get","query","centuries","getAll","type","placeholder","onChange","e","concat","target","map","century","includes","_toConsumableArray","filter","cent","length","PersonLink","person","slug","name","location","useLocation","PeopleTable","people","selectedSlug","useParams","sort","order","getPreparedParams","born","died","fatherName","motherName","mother","find","mom","father","dad","isSelectedSlug","pathname","getPreparedPeople","preparedPeople","person1","person2","localeCompare","sortPeople","sexFilter","Math","floor","centuriesFilter","lowerCaseQuery","toLowerCase","queryFilter","PeoplePage","_useState","useState","_useState2","setPeople","_useState3","_useState4","isError","setIsError","_useState5","_useState6","isLoading","setIsLoading","useEffect","getPeople","catch","finally","_Fragment","Root","Router","Routes","Route","path","element","index","Navigate","replace","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.8b0213a9.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getLinkClass = (\n  { isActive }: { isActive: boolean },\n) => classNames('navbar-item', { 'has-background-grey-lighter': isActive });\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={getLinkClass}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={getLinkClass}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar/Navbar';\n\nimport './App.scss';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </div>\n    </div>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useSearchParams } from 'react-router-dom';\nimport { SearchLink } from '../helpers/SearchLink';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const sex = searchParams.get('sex');\n  const query = searchParams.get('query');\n  const centuries = searchParams.getAll('centuries');\n  const centuriesArray = ['16', '17', '18', '19', '20'];\n\n  const resetParams = () => {\n    return {\n      sex: null,\n      query: null,\n      centuries: null,\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'm' }}\n          className={classNames({ 'is-active': sex === 'm' })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: 'f' }}\n          className={classNames({ 'is-active': sex === 'f' })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query || ''}\n            onChange={(e) => {\n              searchParams.set('query', `${e.target.value}`);\n\n              if (searchParams.get('query') === '') {\n                searchParams.delete('query');\n              }\n\n              setSearchParams(searchParams);\n            }}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {\n              centuriesArray.map(century => (\n                <SearchLink\n                  key={century}\n                  params={{\n                    centuries: centuries.includes(century)\n                      ? [...centuries].filter(cent => cent !== century)\n                      : [...centuries, century],\n                  }}\n                  data-cy=\"century\"\n                  className={\n                    classNames('button mr-1', {\n                      'is-info': centuries.includes(century),\n                    })\n                  }\n                >\n                  {century}\n                </SearchLink>\n              ))\n            }\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              data-cy=\"centuryALL\"\n              className={classNames('button is-success', {\n                'is-outlined': centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          params={resetParams()}\n          className=\"button is-link is-outlined is-fullwidth\"\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import classNames from 'classnames';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { slug, sex, name } = person;\n  const location = useLocation();\n\n  return (\n    <Link\n      to={`../${slug + location.search}`}\n      className={classNames({ 'has-text-danger': sex === 'f' })}\n    >\n      {name}\n    </Link>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useLocation, useParams, useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink/PersonLink';\nimport { SearchLink } from '../helpers/SearchLink';\n\ntype Props = {\n  people: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people }) => {\n  const { slug: selectedSlug } = useParams();\n  const location = useLocation();\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n\n  const getPreparedParams = (value: string) => {\n    if (sort === value && !order) {\n      return {\n        sort: value,\n        order: 'desc',\n      };\n    }\n\n    if (sort === value && order) {\n      return {\n        sort: null,\n        order: null,\n      };\n    }\n\n    return {\n      sort: value,\n      order: null,\n    };\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <SearchLink params={getPreparedParams('name')}>\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort-up': sort === 'name' && !order,\n                    'fa-sort-down': sort === 'name' && !!order,\n                    'fa-sort': sort !== 'name',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <SearchLink params={getPreparedParams('sex')}>\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort-up': sort === 'sex' && !order,\n                    'fa-sort-down': sort === 'sex' && !!order,\n                    'fa-sort': sort !== 'sex',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <SearchLink params={getPreparedParams('born')}>\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort-up': sort === 'born' && !order,\n                    'fa-sort-down': sort === 'born' && !!order,\n                    'fa-sort': sort !== 'born',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <SearchLink params={getPreparedParams('died')}>\n                <span className=\"icon\">\n                  <i className={classNames('fas', {\n                    'fa-sort-up': sort === 'died' && !order,\n                    'fa-sort-down': sort === 'died' && !!order,\n                    'fa-sort': sort !== 'died',\n                  })}\n                  />\n                </span>\n              </SearchLink>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {\n          people.map(person => {\n            const {\n              sex,\n              born,\n              died,\n              fatherName,\n              motherName,\n              slug,\n            } = person;\n\n            const mother = people\n              .find(mom => mom.name === motherName);\n            const father = people\n              .find(dad => dad.name === fatherName);\n\n            const isSelectedSlug\n              = slug === selectedSlug\n              && location.pathname.includes(selectedSlug);\n\n            return (\n              <tr\n                key={slug}\n                data-cy=\"person\"\n                className={classNames({\n                  'has-background-warning': isSelectedSlug,\n                })}\n              >\n                <td>\n                  <PersonLink person={person} />\n                </td>\n                <td>{sex}</td>\n                <td>{born}</td>\n                <td>{died}</td>\n                <td>\n                  {\n                    mother ? (\n                      <PersonLink person={mother} />\n                    )\n                      : motherName || '-'\n                  }\n                </td>\n                <td>\n                  {\n                    father ? (\n                      <PersonLink person={father} />\n                    )\n                      : fatherName || '-'\n                  }\n                </td>\n              </tr>\n            );\n          })\n        }\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\n\ntype Sort = 'name' | 'sex' | 'born' | 'died';\ntype Sex = 'm' | 'f';\n\nconst sortPeople = (\n  people: Person[],\n  sort: Sort,\n  order: boolean,\n) => {\n  switch (sort) {\n    case 'name':\n    case 'sex': {\n      return order\n        ? [...people].sort(\n          (person1, person2) => person2[sort].localeCompare(person1[sort]),\n        )\n        : [...people].sort(\n          (person1, person2) => person1[sort].localeCompare(person2[sort]),\n        );\n    }\n\n    case 'born':\n    case 'died': {\n      return order\n        ? [...people]\n          .sort((person1, person2) => person2[sort] - person1[sort])\n        : [...people]\n          .sort((person1, person2) => person1[sort] - person2[sort]);\n    }\n\n    default: {\n      return [...people];\n    }\n  }\n};\n\nconst sexFilter = (\n  people: Person[],\n  sex: Sex,\n) => {\n  return sex === 'm'\n    ? [...people].filter(person => person.sex === 'm')\n    : [...people].filter(person => person.sex === 'f');\n};\n\nconst centuriesFilter = (\n  people: Person[],\n  centuries: Array<string>,\n) => {\n  return [...people]\n    .filter(person => centuries.includes(\n      Math.floor(person.born / 100).toString(),\n    ));\n};\n\nconst queryFilter = (\n  people: Person[],\n  query: string,\n) => {\n  const lowerCaseQuery = query.toLowerCase();\n\n  return [...people].filter(\n    person => person.name.toLowerCase().includes(lowerCaseQuery)\n    || (person.motherName\n      && person.motherName.toLowerCase().includes(lowerCaseQuery))\n    || (person.fatherName\n      && person.fatherName.toLowerCase().includes(lowerCaseQuery)),\n  );\n};\n\nexport const getPreparedPeople = (\n  people: Person[],\n) => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get('sort');\n  const order = searchParams.get('order');\n  const sex = searchParams.get('sex');\n  const centuries = searchParams.getAll('centuries');\n  const query = searchParams.get('query');\n  let preparedPeople = [...people];\n\n  if (sort) {\n    preparedPeople = sortPeople(preparedPeople, sort as Sort, !!order);\n  }\n\n  if (sex) {\n    preparedPeople = sexFilter(preparedPeople, sex as Sex);\n  }\n\n  if (centuries.length) {\n    preparedPeople = centuriesFilter(preparedPeople, centuries);\n  }\n\n  if (query) {\n    preparedPeople = queryFilter(preparedPeople, query);\n  }\n\n  return preparedPeople;\n};\n","import { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Person } from '../../types';\nimport { getPeople } from '../../api';\nimport { PeopleFilters } from '../PeopleFilters';\nimport { PeopleTable } from '../PeopleTable';\nimport { getPreparedPeople } from '../../helpers/GetPreparedPeople';\n// import { getPreparedPeople } from '../../helpers/GetPreparedPeople';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const preparedPeople = getPreparedPeople(people);\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n\n    getPeople()\n      .then(setPeople)\n      .catch(() => {\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {\n            !isError && !isLoading && !!people.length && (\n              <div className=\"column is-7-tablet is-narrow-desktop\">\n                <PeopleFilters />\n              </div>\n            )\n          }\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {\n                isLoading && (\n                  <Loader />\n                )\n              }\n\n              {\n                isError && (\n                  <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                    Something went wrong\n                  </p>\n                )\n              }\n\n              {\n                !isError && !isLoading && !people.length && (\n                  <p data-cy=\"noPeopleMessage\">\n                    There are no people on the server\n                  </p>\n                )\n              }\n\n              {\n                !isError && !isLoading && !!people.length && (\n                  <PeopleTable people={preparedPeople} />\n                )\n              }\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { NotFoundPage } from './components/NotFoundPage/NotFoundPage';\nimport { HomePage } from './components/HomePage/HomePage';\nimport { PeoplePage } from './components/PeoplePage/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route index element={<HomePage />} />\n\n        <Route path=\"people\">\n          <Route path=\":slug?\" element={<PeoplePage />} />\n        </Route>\n\n        <Route path=\"*\" element={<NotFoundPage />} />\n        <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { Root } from './Root';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Root />,\n  );\n"],"sourceRoot":""}